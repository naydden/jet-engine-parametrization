%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 330 119
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, May 25, 2018 3:04:46 AM CEST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
330 119 setpagesize
0 0 0 0 setmargins
0 0 setorigin
330 119 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
330.000 0.00000 l
330.000 119.000 l
0.00000 119.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
330.000 0.00000 l
330.000 119.000 l
0.00000 119.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 330 119 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -285.000 -195.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
285.000 195.000 m
615.000 195.000 l
615.000 314.000 l
285.000 314.000 l
285.000 195.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -285.000 -195.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -285.000 -195.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -285.000 -195.000 ] defaultmatrix matrix concatmatrix setmatrix
0 J
1.45000 M
newpath
404.660 200.160 m
502.472 200.160 l
513.340 254.500 l
502.472 308.840 l
404.660 308.840 l
415.528 254.500 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
448.014 253.357 m
448.285 252.868 448.607 252.508 448.982 252.279  c
449.357 252.050 449.800 251.936 450.311 251.936  c
450.998 251.936 451.527 252.175 451.896 252.654  c
452.266 253.133 452.451 253.811 452.451 254.686  c
452.451 258.654 l
451.373 258.654 l
451.373 254.732 l
451.373 254.097 451.261 253.628 451.037 253.326  c
450.813 253.024 450.472 252.873 450.014 252.873  c
449.451 252.873 449.008 253.058 448.686 253.428  c
448.363 253.798 448.201 254.305 448.201 254.951  c
448.201 258.654 l
447.123 258.654 l
447.123 254.732 l
447.123 254.097 447.011 253.628 446.787 253.326  c
446.563 253.024 446.217 252.873 445.748 252.873  c
445.196 252.873 444.758 253.058 444.436 253.428  c
444.113 253.798 443.951 254.305 443.951 254.951  c
443.951 258.654 l
442.873 258.654 l
442.873 252.092 l
443.951 252.092 l
443.951 253.107 l
444.201 252.712 444.498 252.417 444.842 252.225  c
445.186 252.032 445.592 251.936 446.061 251.936  c
446.540 251.936 446.946 252.055 447.279 252.295  c
447.613 252.535 447.857 252.889 448.014 253.357  c
h
454.594 252.092 m
455.672 252.092 l
455.672 258.654 l
454.594 258.654 l
454.594 252.092 l
h
454.594 249.529 m
455.672 249.529 l
455.672 250.904 l
454.594 250.904 l
454.594 249.529 l
h
463.396 252.092 m
461.021 255.279 l
463.506 258.654 l
462.240 258.654 l
460.334 256.076 l
458.428 258.654 l
457.146 258.654 l
459.693 255.217 l
457.365 252.092 l
458.631 252.092 l
460.381 254.436 l
462.115 252.092 l
463.396 252.092 l
h
470.654 255.107 m
470.654 255.623 l
465.686 255.623 l
465.738 256.373 465.964 256.941 466.365 257.326  c
466.766 257.712 467.321 257.904 468.029 257.904  c
468.446 257.904 468.850 257.855 469.240 257.756  c
469.631 257.657 470.019 257.503 470.404 257.295  c
470.404 258.326 l
470.008 258.482 469.607 258.605 469.201 258.693  c
468.795 258.782 468.383 258.826 467.967 258.826  c
466.925 258.826 466.097 258.521 465.482 257.912  c
464.868 257.303 464.561 256.477 464.561 255.436  c
464.561 254.363 464.852 253.511 465.436 252.881  c
466.019 252.251 466.800 251.936 467.779 251.936  c
468.665 251.936 469.365 252.219 469.881 252.787  c
470.396 253.355 470.654 254.128 470.654 255.107  c
h
469.576 254.779 m
469.566 254.196 469.399 253.727 469.076 253.373  c
468.753 253.019 468.326 252.842 467.795 252.842  c
467.191 252.842 466.709 253.014 466.350 253.357  c
465.990 253.701 465.785 254.180 465.732 254.795  c
469.576 254.779 l
h
476.225 253.092 m
476.100 253.029 475.967 252.980 475.826 252.943  c
475.686 252.907 475.527 252.889 475.350 252.889  c
474.745 252.889 474.279 253.087 473.951 253.482  c
473.623 253.878 473.459 254.451 473.459 255.201  c
473.459 258.654 l
472.381 258.654 l
472.381 252.092 l
473.459 252.092 l
473.459 253.107 l
473.688 252.712 473.985 252.417 474.350 252.225  c
474.714 252.032 475.157 251.936 475.678 251.936  c
475.751 251.936 475.831 251.941 475.920 251.951  c
476.008 251.962 476.105 251.977 476.209 251.998  c
476.225 253.092 l
h
f
2 J
10.0000 M
q
0 J
1.45000 M
newpath
290.080 200.160 m
388.000 200.160 l
388.000 249.120 l
290.080 249.120 l
h
S
2 J
10.0000 M
0 J
1.45000 M
q
[ 1.00000 0.00000 0.00000 1.00000 296.000 214.000 ] concat
0 0 85 20 rc
q
q
q
Q
q
Q
q
Q
q
Q
newpath
2.35938 4.21875 m
2.35938 7.51562 l
3.84375 7.51562 l
4.39583 7.51562 4.82292 7.37240 5.12500 7.08594  c
5.42708 6.79948 5.57812 6.39062 5.57812 5.85938  c
5.57812 5.33854 5.42708 4.93490 5.12500 4.64844  c
4.82292 4.36198 4.39583 4.21875 3.84375 4.21875  c
2.35938 4.21875 l
h
1.17188 3.25000 m
3.84375 3.25000 l
4.83333 3.25000 5.57812 3.47135 6.07812 3.91406  c
6.57812 4.35677 6.82812 5.00521 6.82812 5.85938  c
6.82812 6.72396 6.57812 7.37760 6.07812 7.82031  c
5.57812 8.26302 4.83333 8.48438 3.84375 8.48438  c
2.35938 8.48438 l
2.35938 12.0000 l
1.17188 12.0000 l
1.17188 3.25000 l
h
f
newpath
9.82812 9.98438 m
9.82812 11.5312 l
11.6875 11.5312 l
11.6875 12.2344 l
9.82812 12.2344 l
9.82812 15.2031 l
9.82812 15.6406 9.89062 15.9245 10.0156 16.0547  c
10.1406 16.1849 10.3906 16.2500 10.7656 16.2500  c
11.6875 16.2500 l
11.6875 17.0000 l
10.7656 17.0000 l
10.0677 17.0000 9.58594 16.8698 9.32031 16.6094  c
9.05469 16.3490 8.92188 15.8802 8.92188 15.2031  c
8.92188 12.2344 l
8.26562 12.2344 l
8.26562 11.5312 l
8.92188 11.5312 l
8.92188 9.98438 l
9.82812 9.98438 l
h
13.1553 16.1719 m
14.7803 16.1719 l
14.7803 10.6094 l
13.0146 10.9531 l
13.0146 10.0625 l
14.7646 9.70312 l
15.7490 9.70312 l
15.7490 16.1719 l
17.3584 16.1719 l
17.3584 17.0000 l
13.1553 17.0000 l
13.1553 16.1719 l
h
22.3457 13.0625 m
22.8145 13.1667 23.1816 13.3776 23.4473 13.6953  c
23.7129 14.0130 23.8457 14.4062 23.8457 14.8750  c
23.8457 15.5938 23.5983 16.1510 23.1035 16.5469  c
22.6087 16.9427 21.9030 17.1406 20.9863 17.1406  c
20.6842 17.1406 20.3717 17.1094 20.0488 17.0469  c
19.7259 16.9844 19.3926 16.8958 19.0488 16.7812  c
19.0488 15.8281 l
19.3197 15.9844 19.6191 16.1042 19.9473 16.1875  c
20.2754 16.2708 20.6165 16.3125 20.9707 16.3125  c
21.5853 16.3125 22.0540 16.1901 22.3770 15.9453  c
22.6999 15.7005 22.8613 15.3438 22.8613 14.8750  c
22.8613 14.4479 22.7103 14.1146 22.4082 13.8750  c
22.1061 13.6354 21.6895 13.5156 21.1582 13.5156  c
20.2988 13.5156 l
20.2988 12.7031 l
21.1895 12.7031 l
21.6790 12.7031 22.0514 12.6042 22.3066 12.4062  c
22.5618 12.2083 22.6895 11.9271 22.6895 11.5625  c
22.6895 11.1979 22.5566 10.9141 22.2910 10.7109  c
22.0254 10.5078 21.6478 10.4062 21.1582 10.4062  c
20.8874 10.4062 20.5957 10.4349 20.2832 10.4922  c
19.9707 10.5495 19.6322 10.6406 19.2676 10.7656  c
19.2676 9.89062 l
19.6426 9.78646 19.9941 9.70833 20.3223 9.65625  c
20.6504 9.60417 20.9551 9.57812 21.2363 9.57812  c
21.9863 9.57812 22.5801 9.74740 23.0176 10.0859  c
23.4551 10.4245 23.6738 10.8854 23.6738 11.4688  c
23.6738 11.8750 23.5592 12.2161 23.3301 12.4922  c
23.1009 12.7682 22.7728 12.9583 22.3457 13.0625  c
h
f
newpath
25.4062 10.5156 m
26.6406 10.5156 l
26.6406 11.5156 l
25.6875 13.3906 l
24.9219 13.3906 l
25.4062 11.5156 l
25.4062 10.5156 l
h
32.8008 3.25000 m
34.5664 3.25000 l
36.8008 9.20312 l
39.0508 3.25000 l
40.8164 3.25000 l
40.8164 12.0000 l
39.6602 12.0000 l
39.6602 4.31250 l
37.3945 10.3125 l
36.2070 10.3125 l
33.9570 4.31250 l
33.9570 12.0000 l
32.8008 12.0000 l
32.8008 3.25000 l
h
f
newpath
43.2344 16.1719 m
44.8594 16.1719 l
44.8594 10.6094 l
43.0938 10.9531 l
43.0938 10.0625 l
44.8438 9.70312 l
45.8281 9.70312 l
45.8281 16.1719 l
47.4375 16.1719 l
47.4375 17.0000 l
43.2344 17.0000 l
43.2344 16.1719 l
h
52.4248 13.0625 m
52.8936 13.1667 53.2607 13.3776 53.5264 13.6953  c
53.7920 14.0130 53.9248 14.4062 53.9248 14.8750  c
53.9248 15.5938 53.6774 16.1510 53.1826 16.5469  c
52.6878 16.9427 51.9821 17.1406 51.0654 17.1406  c
50.7633 17.1406 50.4508 17.1094 50.1279 17.0469  c
49.8050 16.9844 49.4717 16.8958 49.1279 16.7812  c
49.1279 15.8281 l
49.3988 15.9844 49.6982 16.1042 50.0264 16.1875  c
50.3545 16.2708 50.6956 16.3125 51.0498 16.3125  c
51.6644 16.3125 52.1331 16.1901 52.4561 15.9453  c
52.7790 15.7005 52.9404 15.3438 52.9404 14.8750  c
52.9404 14.4479 52.7894 14.1146 52.4873 13.8750  c
52.1852 13.6354 51.7686 13.5156 51.2373 13.5156  c
50.3779 13.5156 l
50.3779 12.7031 l
51.2686 12.7031 l
51.7581 12.7031 52.1305 12.6042 52.3857 12.4062  c
52.6410 12.2083 52.7686 11.9271 52.7686 11.5625  c
52.7686 11.1979 52.6357 10.9141 52.3701 10.7109  c
52.1045 10.5078 51.7269 10.4062 51.2373 10.4062  c
50.9665 10.4062 50.6748 10.4349 50.3623 10.4922  c
50.0498 10.5495 49.7113 10.6406 49.3467 10.7656  c
49.3467 9.89062 l
49.7217 9.78646 50.0732 9.70833 50.4014 9.65625  c
50.7295 9.60417 51.0342 9.57812 51.3154 9.57812  c
52.0654 9.57812 52.6592 9.74740 53.0967 10.0859  c
53.5342 10.4245 53.7529 10.8854 53.7529 11.4688  c
53.7529 11.8750 53.6383 12.2161 53.4092 12.4922  c
53.1800 12.7682 52.8519 12.9583 52.4248 13.0625  c
h
f
newpath
55.4062 10.5156 m
56.6406 10.5156 l
56.6406 11.5156 l
55.6875 13.3906 l
54.9219 13.3906 l
55.4062 11.5156 l
55.4062 10.5156 l
h
61.5977 3.25000 m
68.9883 3.25000 l
68.9883 4.25000 l
65.8945 4.25000 l
65.8945 12.0000 l
64.7070 12.0000 l
64.7070 4.25000 l
61.5977 4.25000 l
61.5977 3.25000 l
h
f
newpath
70.8281 9.98438 m
70.8281 11.5312 l
72.6875 11.5312 l
72.6875 12.2344 l
70.8281 12.2344 l
70.8281 15.2031 l
70.8281 15.6406 70.8906 15.9245 71.0156 16.0547  c
71.1406 16.1849 71.3906 16.2500 71.7656 16.2500  c
72.6875 16.2500 l
72.6875 17.0000 l
71.7656 17.0000 l
71.0677 17.0000 70.5859 16.8698 70.3203 16.6094  c
70.0547 16.3490 69.9219 15.8802 69.9219 15.2031  c
69.9219 12.2344 l
69.2656 12.2344 l
69.2656 11.5312 l
69.9219 11.5312 l
69.9219 9.98438 l
70.8281 9.98438 l
h
74.1553 16.1719 m
75.7803 16.1719 l
75.7803 10.6094 l
74.0146 10.9531 l
74.0146 10.0625 l
75.7646 9.70312 l
76.7490 9.70312 l
76.7490 16.1719 l
78.3584 16.1719 l
78.3584 17.0000 l
74.1553 17.0000 l
74.1553 16.1719 l
h
83.3457 13.0625 m
83.8145 13.1667 84.1816 13.3776 84.4473 13.6953  c
84.7129 14.0130 84.8457 14.4062 84.8457 14.8750  c
84.8457 15.5938 84.5983 16.1510 84.1035 16.5469  c
83.6087 16.9427 82.9030 17.1406 81.9863 17.1406  c
81.6842 17.1406 81.3717 17.1094 81.0488 17.0469  c
80.7259 16.9844 80.3926 16.8958 80.0488 16.7812  c
80.0488 15.8281 l
80.3197 15.9844 80.6191 16.1042 80.9473 16.1875  c
81.2754 16.2708 81.6165 16.3125 81.9707 16.3125  c
82.5853 16.3125 83.0540 16.1901 83.3770 15.9453  c
83.6999 15.7005 83.8613 15.3438 83.8613 14.8750  c
83.8613 14.4479 83.7103 14.1146 83.4082 13.8750  c
83.1061 13.6354 82.6895 13.5156 82.1582 13.5156  c
81.2988 13.5156 l
81.2988 12.7031 l
82.1895 12.7031 l
82.6790 12.7031 83.0514 12.6042 83.3066 12.4062  c
83.5618 12.2083 83.6895 11.9271 83.6895 11.5625  c
83.6895 11.1979 83.5566 10.9141 83.2910 10.7109  c
83.0254 10.5078 82.6478 10.4062 82.1582 10.4062  c
81.8874 10.4062 81.5957 10.4349 81.2832 10.4922  c
80.9707 10.5495 80.6322 10.6406 80.2676 10.7656  c
80.2676 9.89062 l
80.6426 9.78646 80.9941 9.70833 81.3223 9.65625  c
81.6504 9.60417 81.9551 9.57812 82.2363 9.57812  c
82.9863 9.57812 83.5801 9.74740 84.0176 10.0859  c
84.4551 10.4245 84.6738 10.8854 84.6738 11.4688  c
84.6738 11.8750 84.5592 12.2161 84.3301 12.4922  c
84.1009 12.7682 83.7728 12.9583 83.3457 13.0625  c
h
f
Q
Q
Q
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
290.080 259.880 m
388.000 259.880 l
388.000 308.840 l
290.080 308.840 l
h
S
2 J
10.0000 M
0 J
1.45000 M
q
[ 1.00000 0.00000 0.00000 1.00000 305.000 274.000 ] concat
0 0 67 20 rc
q
q
q
Q
q
Q
q
Q
q
Q
newpath
2.35938 4.21875 m
2.35938 7.51562 l
3.84375 7.51562 l
4.39583 7.51562 4.82292 7.37240 5.12500 7.08594  c
5.42708 6.79948 5.57812 6.39062 5.57812 5.85938  c
5.57812 5.33854 5.42708 4.93490 5.12500 4.64844  c
4.82292 4.36198 4.39583 4.21875 3.84375 4.21875  c
2.35938 4.21875 l
h
1.17188 3.25000 m
3.84375 3.25000 l
4.83333 3.25000 5.57812 3.47135 6.07812 3.91406  c
6.57812 4.35677 6.82812 5.00521 6.82812 5.85938  c
6.82812 6.72396 6.57812 7.37760 6.07812 7.82031  c
5.57812 8.26302 4.83333 8.48438 3.84375 8.48438  c
2.35938 8.48438 l
2.35938 12.0000 l
1.17188 12.0000 l
1.17188 3.25000 l
h
f
newpath
9.82812 9.98438 m
9.82812 11.5312 l
11.6875 11.5312 l
11.6875 12.2344 l
9.82812 12.2344 l
9.82812 15.2031 l
9.82812 15.6406 9.89062 15.9245 10.0156 16.0547  c
10.1406 16.1849 10.3906 16.2500 10.7656 16.2500  c
11.6875 16.2500 l
11.6875 17.0000 l
10.7656 17.0000 l
10.0677 17.0000 9.58594 16.8698 9.32031 16.6094  c
9.05469 16.3490 8.92188 15.8802 8.92188 15.2031  c
8.92188 12.2344 l
8.26562 12.2344 l
8.26562 11.5312 l
8.92188 11.5312 l
8.92188 9.98438 l
9.82812 9.98438 l
h
12.9990 9.70312 m
16.8740 9.70312 l
16.8740 10.5469 l
13.9053 10.5469 l
13.9053 12.3281 l
14.0511 12.2760 14.1943 12.2396 14.3350 12.2188  c
14.4756 12.1979 14.6188 12.1875 14.7646 12.1875  c
15.5771 12.1875 16.2204 12.4089 16.6943 12.8516  c
17.1683 13.2943 17.4053 13.8958 17.4053 14.6562  c
17.4053 15.4479 17.1631 16.0599 16.6787 16.4922  c
16.1943 16.9245 15.5042 17.1406 14.6084 17.1406  c
14.3063 17.1406 13.9964 17.1146 13.6787 17.0625  c
13.3610 17.0104 13.0303 16.9323 12.6865 16.8281  c
12.6865 15.8438 l
12.9886 16.0000 13.2959 16.1172 13.6084 16.1953  c
13.9209 16.2734 14.2490 16.3125 14.5928 16.3125  c
15.1553 16.3125 15.6006 16.1641 15.9287 15.8672  c
16.2568 15.5703 16.4209 15.1667 16.4209 14.6562  c
16.4209 14.1562 16.2568 13.7578 15.9287 13.4609  c
15.6006 13.1641 15.1553 13.0156 14.5928 13.0156  c
14.3324 13.0156 14.0693 13.0443 13.8037 13.1016  c
13.5381 13.1589 13.2699 13.2500 12.9990 13.3750  c
12.9990 9.70312 l
h
f
newpath
19.4062 10.5156 m
20.6406 10.5156 l
20.6406 11.5156 l
19.6875 13.3906 l
18.9219 13.3906 l
19.4062 11.5156 l
19.4062 10.5156 l
h
26.8008 3.25000 m
28.5664 3.25000 l
30.8008 9.20312 l
33.0508 3.25000 l
34.8164 3.25000 l
34.8164 12.0000 l
33.6602 12.0000 l
33.6602 4.31250 l
31.3945 10.3125 l
30.2070 10.3125 l
27.9570 4.31250 l
27.9570 12.0000 l
26.8008 12.0000 l
26.8008 3.25000 l
h
f
newpath
37.0781 9.70312 m
40.9531 9.70312 l
40.9531 10.5469 l
37.9844 10.5469 l
37.9844 12.3281 l
38.1302 12.2760 38.2734 12.2396 38.4141 12.2188  c
38.5547 12.1979 38.6979 12.1875 38.8438 12.1875  c
39.6562 12.1875 40.2995 12.4089 40.7734 12.8516  c
41.2474 13.2943 41.4844 13.8958 41.4844 14.6562  c
41.4844 15.4479 41.2422 16.0599 40.7578 16.4922  c
40.2734 16.9245 39.5833 17.1406 38.6875 17.1406  c
38.3854 17.1406 38.0755 17.1146 37.7578 17.0625  c
37.4401 17.0104 37.1094 16.9323 36.7656 16.8281  c
36.7656 15.8438 l
37.0677 16.0000 37.3750 16.1172 37.6875 16.1953  c
38.0000 16.2734 38.3281 16.3125 38.6719 16.3125  c
39.2344 16.3125 39.6797 16.1641 40.0078 15.8672  c
40.3359 15.5703 40.5000 15.1667 40.5000 14.6562  c
40.5000 14.1562 40.3359 13.7578 40.0078 13.4609  c
39.6797 13.1641 39.2344 13.0156 38.6719 13.0156  c
38.4115 13.0156 38.1484 13.0443 37.8828 13.1016  c
37.6172 13.1589 37.3490 13.2500 37.0781 13.3750  c
37.0781 9.70312 l
h
f
newpath
43.4062 10.5156 m
44.6406 10.5156 l
44.6406 11.5156 l
43.6875 13.3906 l
42.9219 13.3906 l
43.4062 11.5156 l
43.4062 10.5156 l
h
49.5977 3.25000 m
56.9883 3.25000 l
56.9883 4.25000 l
53.8945 4.25000 l
53.8945 12.0000 l
52.7070 12.0000 l
52.7070 4.25000 l
49.5977 4.25000 l
49.5977 3.25000 l
h
f
newpath
58.8281 9.98438 m
58.8281 11.5312 l
60.6875 11.5312 l
60.6875 12.2344 l
58.8281 12.2344 l
58.8281 15.2031 l
58.8281 15.6406 58.8906 15.9245 59.0156 16.0547  c
59.1406 16.1849 59.3906 16.2500 59.7656 16.2500  c
60.6875 16.2500 l
60.6875 17.0000 l
59.7656 17.0000 l
59.0677 17.0000 58.5859 16.8698 58.3203 16.6094  c
58.0547 16.3490 57.9219 15.8802 57.9219 15.2031  c
57.9219 12.2344 l
57.2656 12.2344 l
57.2656 11.5312 l
57.9219 11.5312 l
57.9219 9.98438 l
58.8281 9.98438 l
h
61.9990 9.70312 m
65.8740 9.70312 l
65.8740 10.5469 l
62.9053 10.5469 l
62.9053 12.3281 l
63.0511 12.2760 63.1943 12.2396 63.3350 12.2188  c
63.4756 12.1979 63.6188 12.1875 63.7646 12.1875  c
64.5771 12.1875 65.2204 12.4089 65.6943 12.8516  c
66.1683 13.2943 66.4053 13.8958 66.4053 14.6562  c
66.4053 15.4479 66.1631 16.0599 65.6787 16.4922  c
65.1943 16.9245 64.5042 17.1406 63.6084 17.1406  c
63.3063 17.1406 62.9964 17.1146 62.6787 17.0625  c
62.3610 17.0104 62.0303 16.9323 61.6865 16.8281  c
61.6865 15.8438 l
61.9886 16.0000 62.2959 16.1172 62.6084 16.1953  c
62.9209 16.2734 63.2490 16.3125 63.5928 16.3125  c
64.1553 16.3125 64.6006 16.1641 64.9287 15.8672  c
65.2568 15.5703 65.4209 15.1667 65.4209 14.6562  c
65.4209 14.1562 65.2568 13.7578 64.9287 13.4609  c
64.6006 13.1641 64.1553 13.0156 63.5928 13.0156  c
63.3324 13.0156 63.0693 13.0443 62.8037 13.1016  c
62.5381 13.1589 62.2699 13.2500 61.9990 13.3750  c
61.9990 9.70312 l
h
f
Q
Q
Q
2 J
10.0000 M
Q
q
0 J
1.45000 M
newpath
530.000 234.500 m
610.000 234.500 l
610.000 274.500 l
530.000 274.500 l
h
S
2 J
10.0000 M
0 J
1.45000 M
q
[ 1.00000 0.00000 0.00000 1.00000 536.000 244.000 ] concat
0 0 67 20 rc
q
q
q
Q
q
Q
q
Q
q
Q
newpath
2.35938 4.21875 m
2.35938 7.51562 l
3.84375 7.51562 l
4.39583 7.51562 4.82292 7.37240 5.12500 7.08594  c
5.42708 6.79948 5.57812 6.39062 5.57812 5.85938  c
5.57812 5.33854 5.42708 4.93490 5.12500 4.64844  c
4.82292 4.36198 4.39583 4.21875 3.84375 4.21875  c
2.35938 4.21875 l
h
1.17188 3.25000 m
3.84375 3.25000 l
4.83333 3.25000 5.57812 3.47135 6.07812 3.91406  c
6.57812 4.35677 6.82812 5.00521 6.82812 5.85938  c
6.82812 6.72396 6.57812 7.37760 6.07812 7.82031  c
5.57812 8.26302 4.83333 8.48438 3.84375 8.48438  c
2.35938 8.48438 l
2.35938 12.0000 l
1.17188 12.0000 l
1.17188 3.25000 l
h
f
newpath
9.82812 9.98438 m
9.82812 11.5312 l
11.6875 11.5312 l
11.6875 12.2344 l
9.82812 12.2344 l
9.82812 15.2031 l
9.82812 15.6406 9.89062 15.9245 10.0156 16.0547  c
10.1406 16.1849 10.3906 16.2500 10.7656 16.2500  c
11.6875 16.2500 l
11.6875 17.0000 l
10.7656 17.0000 l
10.0677 17.0000 9.58594 16.8698 9.32031 16.6094  c
9.05469 16.3490 8.92188 15.8802 8.92188 15.2031  c
8.92188 12.2344 l
8.26562 12.2344 l
8.26562 11.5312 l
8.92188 11.5312 l
8.92188 9.98438 l
9.82812 9.98438 l
h
15.2178 12.9688 m
14.7803 12.9688 14.4313 13.1198 14.1709 13.4219  c
13.9105 13.7240 13.7803 14.1354 13.7803 14.6562  c
13.7803 15.1875 13.9105 15.6042 14.1709 15.9062  c
14.4313 16.2083 14.7803 16.3594 15.2178 16.3594  c
15.6657 16.3594 16.0173 16.2083 16.2725 15.9062  c
16.5277 15.6042 16.6553 15.1875 16.6553 14.6562  c
16.6553 14.1354 16.5277 13.7240 16.2725 13.4219  c
16.0173 13.1198 15.6657 12.9688 15.2178 12.9688  c
h
17.1865 9.87500 m
17.1865 10.7656 l
16.9365 10.6510 16.6839 10.5625 16.4287 10.5000  c
16.1735 10.4375 15.9261 10.4062 15.6865 10.4062  c
15.0303 10.4062 14.5303 10.6250 14.1865 11.0625  c
13.8428 11.5000 13.6501 12.1667 13.6084 13.0625  c
13.7959 12.7812 14.0355 12.5651 14.3271 12.4141  c
14.6188 12.2630 14.9365 12.1875 15.2803 12.1875  c
16.0094 12.1875 16.5876 12.4089 17.0146 12.8516  c
17.4417 13.2943 17.6553 13.8958 17.6553 14.6562  c
17.6553 15.4062 17.4339 16.0078 16.9912 16.4609  c
16.5485 16.9141 15.9574 17.1406 15.2178 17.1406  c
14.3740 17.1406 13.7308 16.8177 13.2881 16.1719  c
12.8454 15.5260 12.6240 14.5885 12.6240 13.3594  c
12.6240 12.2135 12.8975 11.2969 13.4443 10.6094  c
13.9912 9.92188 14.7230 9.57812 15.6396 9.57812  c
15.8896 9.57812 16.1396 9.60156 16.3896 9.64844  c
16.6396 9.69531 16.9053 9.77083 17.1865 9.87500  c
h
f
newpath
19.4062 10.5156 m
20.6406 10.5156 l
20.6406 11.5156 l
19.6875 13.3906 l
18.9219 13.3906 l
19.4062 11.5156 l
19.4062 10.5156 l
h
26.8008 3.25000 m
28.5664 3.25000 l
30.8008 9.20312 l
33.0508 3.25000 l
34.8164 3.25000 l
34.8164 12.0000 l
33.6602 12.0000 l
33.6602 4.31250 l
31.3945 10.3125 l
30.2070 10.3125 l
27.9570 4.31250 l
27.9570 12.0000 l
26.8008 12.0000 l
26.8008 3.25000 l
h
f
newpath
39.2969 12.9688 m
38.8594 12.9688 38.5104 13.1198 38.2500 13.4219  c
37.9896 13.7240 37.8594 14.1354 37.8594 14.6562  c
37.8594 15.1875 37.9896 15.6042 38.2500 15.9062  c
38.5104 16.2083 38.8594 16.3594 39.2969 16.3594  c
39.7448 16.3594 40.0964 16.2083 40.3516 15.9062  c
40.6068 15.6042 40.7344 15.1875 40.7344 14.6562  c
40.7344 14.1354 40.6068 13.7240 40.3516 13.4219  c
40.0964 13.1198 39.7448 12.9688 39.2969 12.9688  c
h
41.2656 9.87500 m
41.2656 10.7656 l
41.0156 10.6510 40.7630 10.5625 40.5078 10.5000  c
40.2526 10.4375 40.0052 10.4062 39.7656 10.4062  c
39.1094 10.4062 38.6094 10.6250 38.2656 11.0625  c
37.9219 11.5000 37.7292 12.1667 37.6875 13.0625  c
37.8750 12.7812 38.1146 12.5651 38.4062 12.4141  c
38.6979 12.2630 39.0156 12.1875 39.3594 12.1875  c
40.0885 12.1875 40.6667 12.4089 41.0938 12.8516  c
41.5208 13.2943 41.7344 13.8958 41.7344 14.6562  c
41.7344 15.4062 41.5130 16.0078 41.0703 16.4609  c
40.6276 16.9141 40.0365 17.1406 39.2969 17.1406  c
38.4531 17.1406 37.8099 16.8177 37.3672 16.1719  c
36.9245 15.5260 36.7031 14.5885 36.7031 13.3594  c
36.7031 12.2135 36.9766 11.2969 37.5234 10.6094  c
38.0703 9.92188 38.8021 9.57812 39.7188 9.57812  c
39.9688 9.57812 40.2188 9.60156 40.4688 9.64844  c
40.7188 9.69531 40.9844 9.77083 41.2656 9.87500  c
h
f
newpath
43.4062 10.5156 m
44.6406 10.5156 l
44.6406 11.5156 l
43.6875 13.3906 l
42.9219 13.3906 l
43.4062 11.5156 l
43.4062 10.5156 l
h
49.5977 3.25000 m
56.9883 3.25000 l
56.9883 4.25000 l
53.8945 4.25000 l
53.8945 12.0000 l
52.7070 12.0000 l
52.7070 4.25000 l
49.5977 4.25000 l
49.5977 3.25000 l
h
f
newpath
58.8281 9.98438 m
58.8281 11.5312 l
60.6875 11.5312 l
60.6875 12.2344 l
58.8281 12.2344 l
58.8281 15.2031 l
58.8281 15.6406 58.8906 15.9245 59.0156 16.0547  c
59.1406 16.1849 59.3906 16.2500 59.7656 16.2500  c
60.6875 16.2500 l
60.6875 17.0000 l
59.7656 17.0000 l
59.0677 17.0000 58.5859 16.8698 58.3203 16.6094  c
58.0547 16.3490 57.9219 15.8802 57.9219 15.2031  c
57.9219 12.2344 l
57.2656 12.2344 l
57.2656 11.5312 l
57.9219 11.5312 l
57.9219 9.98438 l
58.8281 9.98438 l
h
64.2178 12.9688 m
63.7803 12.9688 63.4313 13.1198 63.1709 13.4219  c
62.9105 13.7240 62.7803 14.1354 62.7803 14.6562  c
62.7803 15.1875 62.9105 15.6042 63.1709 15.9062  c
63.4313 16.2083 63.7803 16.3594 64.2178 16.3594  c
64.6657 16.3594 65.0173 16.2083 65.2725 15.9062  c
65.5277 15.6042 65.6553 15.1875 65.6553 14.6562  c
65.6553 14.1354 65.5277 13.7240 65.2725 13.4219  c
65.0173 13.1198 64.6657 12.9688 64.2178 12.9688  c
h
66.1865 9.87500 m
66.1865 10.7656 l
65.9365 10.6510 65.6839 10.5625 65.4287 10.5000  c
65.1735 10.4375 64.9261 10.4062 64.6865 10.4062  c
64.0303 10.4062 63.5303 10.6250 63.1865 11.0625  c
62.8428 11.5000 62.6501 12.1667 62.6084 13.0625  c
62.7959 12.7812 63.0355 12.5651 63.3271 12.4141  c
63.6188 12.2630 63.9365 12.1875 64.2803 12.1875  c
65.0094 12.1875 65.5876 12.4089 66.0146 12.8516  c
66.4417 13.2943 66.6553 13.8958 66.6553 14.6562  c
66.6553 15.4062 66.4339 16.0078 65.9912 16.4609  c
65.5485 16.9141 64.9574 17.1406 64.2178 17.1406  c
63.3740 17.1406 62.7308 16.8177 62.2881 16.1719  c
61.8454 15.5260 61.6240 14.5885 61.6240 13.3594  c
61.6240 12.2135 61.8975 11.2969 62.4443 10.6094  c
62.9912 9.92188 63.7230 9.57812 64.6396 9.57812  c
64.8896 9.57812 65.1396 9.60156 65.3896 9.64844  c
65.6396 9.69531 65.9053 9.77083 66.1865 9.87500  c
h
f
Q
Q
Q
2 J
10.0000 M
Q
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
